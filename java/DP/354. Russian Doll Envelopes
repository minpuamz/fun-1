// similar to 300. Longest Increasing Subsequence
// dp[i] = max(1, dp[j] +1 for all j < j  
// and envelops[j][0] < envelops[i][0] && envelops[j][1] < envelops[i][1])
// TimeO(n*n) Space O(n)

class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        if (envelopes == null || envelopes.length == 0){
            return 0;
        }
        
        // in-place sort
        Arrays.sort(envelopes, new Comparator<int[]>() {
            public int compare(final int[] a , final int[] b) {
                if (a[0] == b[0]) {
                    return a[1] - b[1];
                } else {
                    return a[0] - b[0];
                }
            };
        });
        
        int len = envelopes.length;
        int[] dp = new int[len];
        int res = 1;
        for (int i = 0 ; i < len; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if (envelopes[i][0] > envelopes[j][0] 
                    && envelopes[i][1] > envelopes[j][1]){
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            res = Math.max(res, dp[i]);
        }
        return res;
    }
}
