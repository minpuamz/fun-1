//df[i][j] = min(df[i-1][j], df[i][j-1]) + grid[i][j]
//df[0][0] = grid[i][j]
// order line by line
// Time and Space O(n*m)
class Solution {
    public int minPathSum(int[][] grid) {
        if (grid == null || grid.length ==0) return 0;
        
        int row = grid.length;
        int col = grid[0].length;
        int[][] dp = new int[row][col];
        
        for (int i = 0 ; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (i == 0  && j == 0) {
                    dp[i][j] = grid[i][j];
                    continue;
                    
                } 
                dp[i][j] = Integer.MAX_VALUE;
                if (i > 0) {
                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j] + grid[i][j]);
                }
                if (j > 0) {
                    dp[i][j] = Math.min(dp[i][j], dp[i][j-1] + grid[i][j]);
                }
            }
        }
        
        return dp[row-1][col-1];
    }
}
