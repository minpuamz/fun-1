// dp means the min perfect squares end in i
// dp[i] = Min(dp[i-j*j] +1) when j*j <= i
// dp[0] = 0
// dp[i] = Int.Max
// Time O(n*sqartroot(n))
// Space O(n)
class Solution {
    public int numSquares(int n) {
        if (n == 0)  return 0;
        int[] dp = new int[n +1];
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            dp[i] = Integer.MAX_VALUE;
            for (int j = 1 ; j*j <= i; j++) {
                dp[i] = Math.min(dp[i- j*j] + 1, dp[i]);
            }
        }
        return dp[n];
    }
}
