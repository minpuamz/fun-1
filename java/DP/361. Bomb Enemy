// 坐标型 dp
// up[i][j] means starting from grid[i][j] how many E can be killed from forwarding direction
// down[i][j] means starting from grid[i][j] how many E can be killed from downwarding direction
// left[i][j] means starting from grid[i][j] how many E can be killed towards left 
// right[i][j] means starting from grid[i][j] how many E can be killed in towards right.
// 每个数组注意计算顺序
// for all empties nodes, find the max Sum(up[i][j] + down[i][j] + left[i][j] + right[i][j])
// Time and Space O(N*M), N is the row count, M is the col count
class Solution {
    public int maxKilledEnemies(char[][] grid) {
        //edge case
        if (grid == null || grid.length == 0) return 0;
        
        int row = grid.length;
        int col = grid[0].length;
        int[][] up = new int[row][col];
        int[][] down = new int[row][col];
        int[][] left = new int[row][col];
        int[][] right = new int[row][col];

        // up[i][j] = up[i-1][j] + 1 iff grid[i][j] is E
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 'W') {
                    up[i][j] = 0;
                    continue;
                }
                up[i][j] = grid[i][j] == 'E' ? 1 : 0;
                if (i > 0) {
                    up[i][j] += up[i-1][j];
                     
                }   
            }
        }
        
        // down[i][j] = down[i+1][j] + 1 iff grid[i][j] is E
        for (int i = row -1 ; i >= 0; i--) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 'W') {
                    down[i][j] = 0;
                    continue;
                }
                down[i][j] = grid[i][j] == 'E' ? 1 : 0;
                if (i < row - 1) {
                    down[i][j] += down[i+1][j];
                }      
            }
        }
        
        // left[i][j] = left[i][j-1] + 1 iff grid[i][j] is E
        for (int i = 0 ; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == 'W') {
                    left[i][j] = 0;
                    continue;
                }
                left[i][j] = grid[i][j] == 'E' ? 1 : 0;
                if (j > 0) {
                    left[i][j] += left[i][j-1];
                }      
            }
        }
        
        // right[i][j] = right[i][j+1] + 1 iff grid[i][j] is E
        for (int i = 0; i < row; i++) {
            for (int j = col - 1; j >= 0; j--) {
                if (grid[i][j] == 'W') {
                    right[i][j] = 0;
                    continue;
                }
                right[i][j] = grid[i][j] == 'E' ? 1 : 0;
                if (j < col -1) {
                    right[i][j] += right[i][j+1];
                     
                }      
            }
        }
        
        int res = 0;
        // scan again,  start node only can be '0' 
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == '0') {
                    res = Math.max(res, left[i][j] + right[i][j] + up[i][j] + down[i][j]);
                }
            }
        }
        
        return res;
    }
}
