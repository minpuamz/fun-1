// 2k+1 stages
// 1st stage no invest
// 2nd in the middle of 1st invest
// 3rd finished 1st invest and yet started 2nd invest
// 4th start the 2nd invest
// 5th finished the 2nd invest
//f[i][j] means the max profit for the i-1 day if stays in the jth stage
// 
// since if you buy and sold at the same time is useless, the most frequent case will be buy and sell every other day
// so special case if k > prices.length/2 the question became buy and sell anytimes
// k <= prices.length/2  similar to 123	Best Time to Buy and Sell Stock III    

// j < 2 or i < 2 not considered use MIN value

class Solution {
    public int maxProfit(int k, int[] prices) {

        int n = prices.length;
        if (n == 0) {
            return 0;
        }
        
        if (k > n/2) {
            return unlimited(prices);
        }        
        
        int[][] f = new int[n+1][2*k+2];
        int i, j;
        f[0][1] = 0;
        // impossible
        for (j = 2; j <= 2* k + 1; j++) {
            f[0][j] = Integer.MIN_VALUE;
        }
        
        for (i = 1; i <= n; i++) {
            // phase 1,3,5
            for (j = 1; j <= 2*k + 1; j+=2) {
                f[i][j] = f[i-1][j];
                //f[i][j] = max(f[i-1][j], f[i-1][j-1] + P[i-1] - P[i-2])
                if (j>=2 && i >=2 && f[i-1][j-1] != Integer.MIN_VALUE) {
                    f[i][j] = Math.max(f[i][j], f[i-1][j-1] + prices[i-1] - prices[i-2]);
                }
            }
            
            for (j = 2; j <= 2*k + 1; j += 2) {
                //phase 2,4
                f[i][j] = f[i-1][j-1];
                // f[i][j] = max(f[i-1][j] + P[i-1] - P[i-2], f[i-1][j-1])
                if ( i >= 2 && f[i-1][j] != Integer.MIN_VALUE) {
                    f[i][j] = Math.max(f[i][j], f[i-1][j] + prices[i-1] - prices[i-2]);
                }
            }
        }
        int res = Integer.MIN_VALUE;
        for (j = 1 ; j <= 2*k + 1; j += 2) {
            res = Math.max(res, f[n][j]);
        }
        return res;
    }
    
    private int unlimited(int[] prices) {
        if (prices.length == 0) return 0;
        int res = 0;
        for (int i = 1; i < prices.length; i++) {
             if (prices[i] - prices[i-1] > 0) {
                 res += prices[i] - prices[i-1];
             }
        }
        return res;
    }
}
