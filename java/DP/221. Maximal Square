// for 1 dp(i,j)=min(dp(i−1,j),dp(i−1,j−1),dp(i,j−1))+1.
// for 0. dp(i, j) = 0;
// Time complexity : O(mn).
// Space complexity : O(mn). Another matrix of same size is used for dp.

class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0 ) return 0;
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[][] dp = new int[rows + 1][cols + 1];
        int res = 0;
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= cols; j++) {
                if (matrix[i-1][j-1] == '1') { // input is string
                    dp[i][j] = 1 + Math.min(dp[i-1][j], Math.min(dp[i-1][j-1], dp[i][j-1]));
                    res = Math.max(res, dp[i][j]);
                }
            }
        }
        return res * res; // wrong size! The required result is the area 
    }
}
