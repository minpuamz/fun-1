//Time Complexity: O(NlogN), where N is the number of nodes in the given tree.
//Space Complexity: O(N).
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<Location> locations;
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        locations = new ArrayList<>();
        
        //in-order traverse, location is sorted by x but not sorted by y or value.
        dfs(root, 0 , 0);
        
        // sort the location by x, y and val
        Collections.sort(locations);
        
        // edge case
        List<List<Integer>> res = new ArrayList<>();
        if (locations.size() == 0) return res;
       
        //At least one node in the tree
        res.add(new ArrayList<Integer>());
        int level = locations.get(0).x;
        
        //Generate level order arraies if necessary
        for (Location location : locations) {
            if (location.x != level) {
                level = location.x;
                res.add(new ArrayList<>());
            }
            res.get(res.size()-1).add(location.val);
        }
        
        return res;
    }
    
    // in-order traverse and insert location to flat locations array
    private void dfs(TreeNode node, int x, int y) {
        if (node != null) {
            dfs(node.left, x -1 , y + 1);
            locations.add(new Location(x, y, node.val));
            dfs(node.right, x + 1, y + 1);
        }
    }
    
    class Location implements Comparable<Location> {
        int x, y, val;
        Location(int x, int y, int val) {
            this.x = x;
            this.y = y;
            this.val = val;
        }
         public int compareTo(final Location b) {
            if (this.x != b.x) {
                 return Integer.compare(this.x, b.x);
            } else if (this.y != b.y) {
                 return Integer.compare(this.y, b.y);
            } else {
                return Integer.compare(this.val, b.val);
            }
        }
    }
}
