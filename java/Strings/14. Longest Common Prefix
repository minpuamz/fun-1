// greedy use 1st element as the candidate of prefix
// Time O(S) , where S is the sum of all characters in all strings.
// In the worst case all nn strings are the same. The algorithm compares the string S1 with the other strings, There are S character comparisons, where SS is the sum of all characters in the input array.
// Space O(1)
class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return "" ;
        String prefix = strs[0];
        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return "";
            }
        }
        return prefix;
    }
}
