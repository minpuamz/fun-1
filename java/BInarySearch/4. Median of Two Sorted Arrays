// Time O(log(min(n,m)))
// https://www.youtube.com/watch?v=LPFhl65R7ww&t=1013s
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) { 
        // convert the issue to always have nums1 shorter then nums2 see the time complexity
        if (nums1.length > nums2.length) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int x = nums1.length;
        int y = nums2.length;
        
        int low = 0;
        int high = x;
        
        while(low <= high) {
            // px , py is the number of elements starting from left
            int px = (low + high) / 2;
            int py = (x + y + 1) / 2 - px;
            
            int maxLeftX = (px == 0) ? Integer.MIN_VALUE : nums1[px -1];
            int minRightX = (px == x) ? Integer.MAX_VALUE: nums1[px];
            int maxLeftY = (py == 0) ? Integer.MIN_VALUE : nums2[py -1];
            int minRightY = (py == y) ? Integer.MAX_VALUE : nums2[py];
            
            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
                // we have found the correct place
                // odd number that the avg from the max left and min right
                if ((x + y) %2 == 0) {
                    return ((double)(Math.max(maxLeftX, maxLeftY)+ Math.min(minRightX, minRightY))/2);
                // even number that take the max of the left
                } else {
                    return (double)Math.max(maxLeftX, maxLeftY);
                }
            } else if (maxLeftX > minRightY ) {
                high = px - 1;
            } else {
                low = px + 1;
            }
        }
        return 0.0;
    }
}


