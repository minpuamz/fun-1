//missingNum < k, then return nums[n - 1] + k - missingNum
//missingNum >= k, then use binary search(during the search k will be updated) to find the index in the array, where the kth missing number will be located in (nums[index], nums[index + 1]), return nums[index] + k

class Solution {
    public int missingElement(int[] nums, int k) {
        int length = nums.length;
        int totalMissing = nums[length - 1] - nums[0] - (length -1);
        if (totalMissing < k) {
           // the kth missing number must exceeded the nums[length]
            return nums[length - 1] + (k - totalMissing) ;
        }
        
        // the kth missing number is between nums[0] and nums[length-1]
        int l = 0;
        int h = length -1;
        
        while (l < h - 1) {
            int m = l + (h - l) / 2;
            totalMissing = nums[m] - nums[l] - (m - l);
            if (totalMissing >= k) {
                // when the number is larger than k, then the index won't be located in (m, h]
                h = m;
            } else {
			    // when the number is smaller than k, then the index won't be located in [l, m), update k -= missing
                k -= totalMissing;
                l = m;
            }
        }
        return nums[l] + k;
    }
}
