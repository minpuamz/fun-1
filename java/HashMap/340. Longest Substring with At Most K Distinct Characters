// Time O(N) or O(N*k)
// each step one uses \mathcal{O}(k)O(k) time to find a minimum value in the hashmap with k 
// Space O(k)
class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        int len = s.length();
        // if s size is 0 or k is 0, directly return 0
        if (len * k == 0) return 0;
        int left = 0;
        int right = 0;
        HashMap<Character, Integer> hashmap = new HashMap<Character, Integer>();
        int res = 1;
        while (right < len) {
            // record the last occurance
            hashmap.put(s.charAt(right), right++);
            // exceed the max distinct characters
            if (hashmap.size() == k + 1) {
                // deleted the left most character
                int del = Collections.min(hashmap.values());
                hashmap.remove(s.charAt(del));
                left = del + 1;
            }
            res = Math.max(res, right - left);
        }
        return res;
    }
}
