// use Trie to optimize the prefix search
class AutocompleteSystem {
    class Node {
        String st;
        int count;
        Node(String st, int count) {
            this.st = st;
            this.count = count;
        }
    }
    class Trie {
        Trie[] child = new Trie[27];
        Map<String, Integer> details = new HashMap<>();
    }
    
    private int int_(char c) {
        return c == ' ' ? 26 : c - 'a';
    }
    
    // APIs
    // insert ,branching out  child and update details, don't forget adding itself to the details
    private void insert(String s, int time) {
        Trie cur = root;        
        for (char c : s.toCharArray()) {
            if (cur.child[int_(c)] == null) {
                cur.child[int_(c)] = new Trie();
            }
            cur.details.put(s, cur.details.getOrDefault(s, 0) + time);
            cur = cur.child[int_(c)];
        }
        // add itself, very important
        if (cur != root) {
            cur.details.put(s, cur.details.getOrDefault(s, 0) + time);
        }
    }
    
    // fetch, input is the prefix, return a list of Node whose st has the prefix.
    private List<Node> fetch (String prefix) {
        // find the prefix trie
        Trie cur = root;
        for (char c : prefix.toCharArray()) {
            if (cur.child[int_(c)] == null) {
                return new ArrayList<Node>();
            }
            cur = cur.child[int_(c)];
        }
        List<Node> res = new ArrayList<>();
        for (String s: cur.details.keySet()) {
            res.add(new Node(s, cur.details.get(s)));
        }
        return res;
    }
    
    // global variable
    Trie root = new Trie();
    String cur = "";

    public AutocompleteSystem(String[] sentences, int[] times) {
        if (sentences == null || sentences.length == 0) return;
        for (int i = 0 ; i < sentences.length; i ++) {
            insert(sentences[i], times[i]);
        }
    }
    
    public List<String> input(char c) {
        List<String> res = new ArrayList<>();
        // specical case, add new occurance and reset cur
        if (c == '#') {
             insert(cur, 1);
             cur = "";
        } else {
            cur += c;
            List<Node> found = fetch(cur);
            // only take tp3 or less
           Collections.sort(found, (a, b) -> a.count == b.count? a.st.compareTo(b.st) : b.count - a.count);
           for (int i = 0; i < Math.min(3, found.size()); i ++) {
               res.add(found.get(i).st);
           }
        }
        return res;
    }
}

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * List<String> param_1 = obj.input(c);
 */
