// smart!!!
// same as 227. Basic Calculator II
// for "(" or ")" use recursive method calling calculate again, but need to find the depth of "()" pair

class Solution {
    public int calculate(String s) {
        if(s == null || s.length() == 0) return 0;
        int res = 0;
        char[] input = s.toCharArray();
        int num = 0;
        char op = '+';
        Stack<Integer> stack = new Stack<>();
        
        for (int  i = 0 ; i < input.length; i++) {

            // get the number
            if (input[i] >= '0' && input[i] <= '9') {
                num = num * 10 + input[i] - '0';
            } else if (input[i] == '(') {
                int j = i, cnt = 0;
                for (; i < input.length; ++i) {
                    if (input[i] == '(') ++cnt;
                    if (input[i] == ')') --cnt;
                    if (cnt == 0) break;
                }
                num = calculate(s.substring(j + 1, i));
            }
            
            if ((input[i] < '0' && input[i] != ' ') || i == input.length - 1) {
                if (op == '+') {
                    stack.push(num);
                } else if (op == '-') {
                    stack.push(-num);
                } else if (op == '*') {
                    stack.push(stack.pop() * num);
                } else if (op == '/') {
                    stack.push(stack.pop() / num);
                }
                num = 0;
                op = input[i];
            }            
        }
        while(!stack.isEmpty()) {
            res += stack.pop();
        }
        return res;
    }
}
