// 递增的单调栈
// save index into increasing deque
// last is the potential result, but need to make sure it is within the range i - k + 1
// first is smaller than current, keep poping
// deque api peekFirst, removeFirst, push, peekLast, removeLast
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || nums.length == 0){
            return new int[0];
        }
        
        List<Integer> res = new ArrayList<>();
        Deque<Integer> increasing  = new LinkedList<>();
        
        for (int i = 0; i < nums.length; i++) {
            while (!increasing.isEmpty() && nums[increasing.peekFirst()] < nums[i]) {
                increasing.removeFirst();
            }
            increasing.push(i);
            
            // if candidate exceed the boundary
            if ( increasing.peekLast() < i- k + 1){
                increasing.removeLast();
            }
            // start to genereate answer
            if (i >= k -1) {
                res.add(nums[increasing.peekLast()]);
            }
        }

        return res.stream().mapToInt(i -> i).toArray();
    }
}
