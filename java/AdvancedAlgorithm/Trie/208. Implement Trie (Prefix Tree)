Time complexity : O(m), m is the length of the key

Space complexity : O(1)

class TrieNode {
    public TrieNode[] child = new TrieNode[26];
    public boolean isWord = false;
    public TrieNode() {
    }
}
class Trie {
    
    TrieNode root;
    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        if (word == null || word.length() == 0) return;
        TrieNode cur = root;
        
        for (char c : word.toCharArray()) {
            int index = c -'a';
            if (cur.child[index] == null) {
                cur.child[index] = new TrieNode();
            }
            cur = cur.child[index];
        }
        cur.isWord = true;
    
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode cur = root; 
         for (char c : word.toCharArray()) {
              int index = c -'a';
              if (cur.child[index] == null){
                  return false;
              }
              cur = cur.child[index];
         }
        return cur.isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode cur = root; 
         for (char c : prefix.toCharArray()) {
             int index = c -'a';
             if (cur.child[index] == null){
                  return false;
              }
             cur = cur.child[index];
         }
         return true;
    }
    
    
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
