// backTrack and Trie
Space Complexity: \mathcal{O}(N)O(N), where NN is the total number of letters in the dictionary.

class TrieNode {
    HashMap<Character, TrieNode> children = new HashMap<>();
    String word = null;
    public TrieNode(){};
}
class Solution {
    char[][] board;
    public List<String> findWords(char[][] board, String[] words) {
        //build up the tree
        TrieNode root = new TrieNode();

        for (String word : words) {
            char[] input = word.toCharArray();
            TrieNode par = root;
            
            for (char c: input) {
                if (par.children.containsKey(c)) {
                    par = par.children.get(c);
                } else {
                    TrieNode node = new TrieNode();
                    par.children.put(c, node);
                    par = node;
                }
            }
            par.word = word;
        }
        
        // Iterate the board and try to find answer
        List<String> ans = new ArrayList<>();
        for (int i = 0 ; i < board.length; i++) {
            for (int j = 0 ; j < board[i].length; j++) {
                if (root.children.containsKey(board[i][j])) {
                    internal(i, j, board, root, ans);
                }
            }
        }
        return ans;
        
    }
    
    private void internal(int row, int col, char[][]board, TrieNode parent, List<String> ans) {
        int[] nextr = {-1, 0, 1, 0};
        int[] nextc = {0, 1, 0, -1};
        // save the letter
        char c = board[row][col];

        TrieNode currNode = parent.children.get(c);

        // once got a word, void the string and continue
        if (currNode.word != null) {
            ans.add(currNode.word);
            currNode.word = null;
            // can not return 
        }
        
        // in case when same letter endup been used more than once
        board[row][col] = '#';
        for (int i = 0; i < 4; i++) {
            int rr = nextr[i] + row;
            int cc = nextc[i] + col;
            if (rr >= 0 && rr < board.length && cc >= 0 && cc < board[0].length) {
                if (currNode.children.containsKey(board[rr][cc])) {
                    internal(rr, cc, board, currNode, ans);
                }
            }
        }
        board[row][col] = c;
    }
}
