class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        // init data
        int idx = 0;
        int n = intervals.length;
        LinkedList<int[]> res = new LinkedList<int[]>();
        int start = newInterval[0]; int end = newInterval[1];
        // find the split place
        while (idx < n && start > intervals[idx][0]) {
            res.add(intervals[idx]);
            idx++;
        }
        // add newInterval
        int[] interval = new int[2];
        // if not overlapped from before
        if (res.isEmpty() || res.getLast()[1] < start) {
            res.add(newInterval);
        } else {
            interval = res.removeLast();
            interval[1] = Math.max(interval[1], end);
            res.add(interval);
           
         }
        
        // add next intervals, merge with newInterval if needed
        while (idx < n) {
          interval = intervals[idx++];
          int newstart = interval[0], newend = interval[1];
          // if there is no overlap, just add an interval
          if (res.getLast()[1] < newstart) res.add(interval);
          // if there is an overlap, merge with the last interval
          else {
            interval = res.removeLast();
            interval[1] = Math.max(interval[1], newend);
            res.add(interval);
          }
        }
        return res.toArray(new int[res.size()][2]);
        }
}
