class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        // edge case
        if (numerator == 0) return "0";
        
        StringBuilder sb = new StringBuilder();
        if (numerator > 0 ^ denominator > 0 ) {
            sb.append("-");
        }
        
        // Convert to Long or else abs(-2147483648) overflows
        long dividend = Math.abs(Long.valueOf(numerator));
        long divisor = Math.abs(Long.valueOf(denominator));
        
        long res = Math.abs(Long.valueOf(dividend / divisor));
        long remain = Math.abs(Long.valueOf(dividend % divisor));
        sb.append(String.valueOf(res));
        if (remain == 0) return sb.toString();
        
        sb.append(".");
        Map<Long, Integer> trace = new HashMap<>();
        while (remain != 0) {
            if (trace.containsKey(remain)) {
                sb.insert(trace.get(remain), "(");
                sb.append(")");
                break;
            }
            trace.put(remain, sb.length());
            remain *= 10;
            sb.append(String.valueOf(remain/divisor));
            remain %= denominator;
        }
        
        return sb.toString();
    }
}
