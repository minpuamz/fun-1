/*

countA[2] = 4, as A[0] = A[2] = A[4] = A[5] = 2
countB[2] = 3, as B[1] = B[3] = B[5] = 2
same[2] = 1, as A[5] = B[5] = 2
We have countA[2] + countB[2] - same[2] = 6,
*/

//Time O(N)
//Space O(N)
class Solution {
    public int minDominoRotations(int[] A, int[] B) {
        if (A == null || B == null || A.length != B.length) return -1;
        int[] countA = new int[7];
        int[] countB = new int[7];
        int[] same = new int[7];
        for (int i = 0 ; i < A.length; i++) {
            countA[A[i]] ++;
            countB[B[i]] ++;
            if (A[i] == B[i] ) {
                same[A[i]]++;
            }
        }
        
        for (int i = 1 ; i < 7 ; i ++) {
            if (countA[i] + countB[i] - same[i] == A.length) {
                return Math.min(countA[i], countB[i]) - same[i];
            }
        }
        
        return -1;
    }
}
