
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>>res = new ArrayList<>();
        backtrace(res, new ArrayList<>(), candidates, target, 0);
        return res;
    }
    
    private void backtrace(List<List<Integer>>res, ArrayList<Integer> current, int[] nums, int target, int start) {
        // edge
        if (target < 0) return;
        if (target == 0) {
            res.add(new ArrayList<>(current));
            return;
        }
        for (int i = start; i < nums.length; i++) {
            current.add(nums[i]);
            backtrace(res, current, nums, target - nums[i], i) ;// can reuse the element
            current.remove(current.size() - 1);
        }
    }
}
