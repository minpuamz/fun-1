class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        backtrace(res, nums, new ArrayList<>(), new boolean[nums.length]);
        return res;
    }
    
    private void backtrace(List<List<Integer>> res, int[] nums, ArrayList<Integer> current, boolean[] visited) {
        if (current.size() == nums.length) {
            res.add(new ArrayList<>(current));
            return;
        }
    
    for (int i = 0; i < nums.length; i++) {
        if (visited[i] || (i >= 1 && nums[i] == nums[i-1] && !visited[i-1])) continue;
        current.add(nums[i]);
        visited[i] = true;
        backtrace(res, nums, current, visited);
        current.remove(current.size() - 1);
        visited[i] = false;
    }
    }
}
