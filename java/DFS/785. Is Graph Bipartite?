// Coloring by Depth-First Search
// use three color group , 0 and 1 means real group since it is asked to divide into two group, -1 means not yet visited
//  for each node, scan its direct neighbor, they should not share the same color group if they have been initialized.
// Time O(N + E);
// Space O(N)
class Solution {
    public boolean isBipartite(int[][] graph) {
        int len = graph.length;
        int[] color = new int[len];
        Arrays.fill(color, -1);
        
        for (int i = 0; i < len; i ++) {
            if (color[i] == -1) {
                // index
                Queue<Integer> visit = new LinkedList<>();
                visit.add(i);
                color[i] = 0;
                while(!visit.isEmpty()) {
                    int node = visit.poll();
                    for (int nei: graph[node]) {
                        if (color[nei] == -1) {
                            visit.add(nei);
                            color[nei] = color[node] ^ 1;
                        } else if (color[nei] == color[node]) {
                            return false;
                        }
                    }
                }
            }
        }
        
        return true;
    }
}

